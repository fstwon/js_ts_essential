{"version":3,"sources":["app.js"],"names":["ajax","XMLHttpRequest","open","send","newsFeed","JSON","parse","response","ul","document","createElement","i","length","li","innerHTML","title","appendChild","root","getElementById"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA,IAAMA,IAAI,GAAG,IAAIC,cAAc,CAAC,CAAC;;AAEjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAD,IAAI,CAACE,IAAI,CAAC,KAAK,EAAE,sCAAsC,EAAE,KAAK,CAAC;;AAE/D;AACA;AACA;AACA;AACA;AACA;AACA;AACAF,IAAI,CAACG,IAAI,CAAC,CAAC;;AAEX;AACA;AACA;AACA;AACA,IAAMC,QAAQ,GAAGC,IAAI,CAACC,KAAK,CAACN,IAAI,CAACO,QAAQ,CAAC;;AAE1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAMC,EAAE,GAAGC,QAAQ,CAACC,aAAa,CAAC,IAAI,CAAC;AAEvC,KAAI,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGP,QAAQ,CAACQ,MAAM,EAAED,CAAC,EAAE,EAAE;EACvC,IAAME,EAAE,GAAGJ,QAAQ,CAACC,aAAa,CAAC,IAAI,CAAC;EACvCG,EAAE,CAACC,SAAS,GAAGV,QAAQ,CAACO,CAAC,CAAC,CAACI,KAAK;EAChCP,EAAE,CAACQ,WAAW,CAACH,EAAE,CAAC;AACpB;AAAC;;AAED;AACA,IAAMI,IAAI,GAAGR,QAAQ,CAACS,cAAc,CAAC,MAAM,CAAC;AAC5CD,IAAI,CAACD,WAAW,CAACR,EAAE,CAAC","file":"app.c328ef1a.js","sourceRoot":"..","sourcesContent":["/** \r\n * XMLHttpRequest\r\n * 서버에 데이터를 요청하기 위한 브라우저 내장 객체\r\n * */\r\n//변수 ajax에 다른 값을 할당할 필요가 없어서 const로 선언 \r\nconst ajax = new XMLHttpRequest();\r\n\r\n// 요구사항 - XHLHttpRequest 객체를 통해 Hacker news에서 제공하는 api를 사용하여 news feed 리스트를 가져온다. \r\n/**\r\n * XMLHttpRequest.open\r\n * 새로운 http request를 만들거나 기존 request를 초기화한다. \r\n * parameters (http method, url, async, user, password)\r\n * \r\n * optional\r\n * async, 요청을 비동기로 처리할지 여부, boolean, default = true\r\n * user, 인증 목적으로 사용할 유저 이름, default = null\r\n * password, 인증 목적으로 사용할 비밀번호, default = null \r\n */\r\najax.open(\"GET\", \"https://api.hnpwa.com/v0/news/1.json\", false);\r\n\r\n/**\r\n * XMLHttpRequest.send\r\n * 서버에 요청을 전송한다.\r\n * parameter, (body)\r\n * optional\r\n * body, 요청으로 전송할 데이터\r\n */\r\najax.send();\r\n\r\n/**\r\n * ajax.response\r\n * 요청한 데이터를 JSON 객체로 확인할 수 있다.\r\n */\r\nconst newsFeed = JSON.parse(ajax.response);\r\n\r\n// 요구사항 - 받아온 데이터의 title을 ul, li 태그를 사용하여 보여준다.\r\n/**\r\n * 1. ul tag를 만들어준다. ul 변수의 값에 다른 값을 할당할 필요가 없어서 상수 const로 선언\r\n * 2. for 문을 돌려 for문이 도는동안 새로운 li element를 만들고 newsFeed의 각 데이터 타이틀을 li.innerHTML에 할당해준다\r\n * 3. 데이터 타이틀이 할당된 li element를 ul element에 추가한다.\r\n * 4. li element가 모두 추가된 ul element를 root element에 추가한다.\r\n */\r\nconst ul = document.createElement('ul');\r\n\r\nfor(let i = 0; i < newsFeed.length; i++) {\r\n  const li = document.createElement(\"li\");\r\n  li.innerHTML = newsFeed[i].title\r\n  ul.appendChild(li);\r\n};\r\n\r\n// 역시 root의 값은 변경될 일이 없어서 상수 const로 선언 \r\nconst root = document.getElementById('root');\r\nroot.appendChild(ul);\r\n"]}